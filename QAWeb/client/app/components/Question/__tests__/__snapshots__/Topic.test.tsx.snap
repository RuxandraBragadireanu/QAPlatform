// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Topic should render correctly, and match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <QuestionContainer
    addComment={[Function]}
    deleteComment={[Function]}
    isLoading={false}
    match={
      Object {
        "params": Object {
          "id": 100,
        },
      }
    }
    onLoad={[Function]}
    topic={
      Object {
        "comments": Array [
          Object {
            "description": "TestDescription",
            "id": 100,
            "user": Object {
              "id": 1000,
              "username": "TestUserName2",
            },
          },
        ],
        "id": 1,
        "title": "TestTitle1",
        "userName": "TestUsername1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          style={
            Object {
              "marginLeft": 24,
            }
          }
        >
          <h1>
            TestTitle1
          </h1>
          <ValidatorForm
            debounceTime={0}
            onError={[Function]}
            onSubmit={[Function]}
          >
            <TextValidator
              InputLabelProps={
                Object {
                  "shrink": true,
                }
              }
              errorMessages={
                Array [
                  "This field is required",
                ]
              }
              id="standard-textarea"
              label="Comment"
              margin="normal"
              multiline={true}
              name="comment"
              onChange={[Function]}
              style={
                Object {
                  "width": "calc(40% + 12px)",
                }
              }
              validatorListener={[Function]}
              validators={
                Array [
                  "required",
                ]
              }
              value=""
              variant="outlined"
            />
            <div>
              <WithStyles(Button)
                type="submit"
                variant="contained"
              >
                Submit
              </WithStyles(Button)>
            </div>
          </ValidatorForm>
        </div>,
        <div>
          <WithStyles(Paper)
            style={
              Object {
                "margin": 24,
                "overflowX": "auto",
                "width": "40%",
              }
            }
          >
            <div
              style={
                Object {
                  "padding": 24,
                  "wordBreak": "break-word",
                }
              }
            >
              <b>
                TestUserName2
              </b>
              <div
                style={
                  Object {
                    "display": "flex",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "marginTop": 8,
                    }
                  }
                >
                  TestDescription
                </div>
                <div
                  onClick={[Function]}
                  style={
                    Object {
                      "cursor": "pointer",
                      "display": "flex",
                      "marginLeft": "40%",
                      "marginTop": -8,
                      "position": "absolute",
                    }
                  }
                >
                  <pure(DeleteForeverIcon) />
                </div>
              </div>
            </div>
          </WithStyles(Paper)>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1>
              TestTitle1
            </h1>,
            <ValidatorForm
              debounceTime={0}
              onError={[Function]}
              onSubmit={[Function]}
            >
              <TextValidator
                InputLabelProps={
                  Object {
                    "shrink": true,
                  }
                }
                errorMessages={
                  Array [
                    "This field is required",
                  ]
                }
                id="standard-textarea"
                label="Comment"
                margin="normal"
                multiline={true}
                name="comment"
                onChange={[Function]}
                style={
                  Object {
                    "width": "calc(40% + 12px)",
                  }
                }
                validatorListener={[Function]}
                validators={
                  Array [
                    "required",
                  ]
                }
                value=""
                variant="outlined"
              />
              <div>
                <WithStyles(Button)
                  type="submit"
                  variant="contained"
                >
                  Submit
                </WithStyles(Button)>
              </div>
            </ValidatorForm>,
          ],
          "style": Object {
            "marginLeft": 24,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "TestTitle1",
            },
            "ref": null,
            "rendered": "TestTitle1",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <TextValidator
                  InputLabelProps={
                    Object {
                      "shrink": true,
                    }
                  }
                  errorMessages={
                    Array [
                      "This field is required",
                    ]
                  }
                  id="standard-textarea"
                  label="Comment"
                  margin="normal"
                  multiline={true}
                  name="comment"
                  onChange={[Function]}
                  style={
                    Object {
                      "width": "calc(40% + 12px)",
                    }
                  }
                  validatorListener={[Function]}
                  validators={
                    Array [
                      "required",
                    ]
                  }
                  value=""
                  variant="outlined"
                />,
                <div>
                  <WithStyles(Button)
                    type="submit"
                    variant="contained"
                  >
                    Submit
                  </WithStyles(Button)>
                </div>,
              ],
              "debounceTime": 0,
              "onError": [Function],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "InputLabelProps": Object {
                    "shrink": true,
                  },
                  "errorMessages": Array [
                    "This field is required",
                  ],
                  "id": "standard-textarea",
                  "label": "Comment",
                  "margin": "normal",
                  "multiline": true,
                  "name": "comment",
                  "onChange": [Function],
                  "style": Object {
                    "width": "calc(40% + 12px)",
                  },
                  "validatorListener": [Function],
                  "validators": Array [
                    "required",
                  ],
                  "value": "",
                  "variant": "outlined",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(Button)
                    type="submit"
                    variant="contained"
                  >
                    Submit
                  </WithStyles(Button)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Submit",
                    "type": "submit",
                    "variant": "contained",
                  },
                  "ref": null,
                  "rendered": "Submit",
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            Array [
              <WithStyles(Paper)
                style={
                  Object {
                    "margin": 24,
                    "overflowX": "auto",
                    "width": "40%",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "padding": 24,
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <b>
                    TestUserName2
                  </b>
                  <div
                    style={
                      Object {
                        "display": "flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "marginTop": 8,
                        }
                      }
                    >
                      TestDescription
                    </div>
                    <div
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                          "display": "flex",
                          "marginLeft": "40%",
                          "marginTop": -8,
                          "position": "absolute",
                        }
                      }
                    >
                      <pure(DeleteForeverIcon) />
                    </div>
                  </div>
                </div>
              </WithStyles(Paper)>,
            ],
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "100",
            "nodeType": "class",
            "props": Object {
              "children": <div
                style={
                  Object {
                    "padding": 24,
                    "wordBreak": "break-word",
                  }
                }
              >
                <b>
                  TestUserName2
                </b>
                <div
                  style={
                    Object {
                      "display": "flex",
                    }
                  }
                >
                  <div
                    style={
                      Object {
                        "marginTop": 8,
                      }
                    }
                  >
                    TestDescription
                  </div>
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                        "display": "flex",
                        "marginLeft": "40%",
                        "marginTop": -8,
                        "position": "absolute",
                      }
                    }
                  >
                    <pure(DeleteForeverIcon) />
                  </div>
                </div>
              </div>,
              "style": Object {
                "margin": 24,
                "overflowX": "auto",
                "width": "40%",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <b>
                    TestUserName2
                  </b>,
                  <div
                    style={
                      Object {
                        "display": "flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "marginTop": 8,
                        }
                      }
                    >
                      TestDescription
                    </div>
                    <div
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                          "display": "flex",
                          "marginLeft": "40%",
                          "marginTop": -8,
                          "position": "absolute",
                        }
                      }
                    >
                      <pure(DeleteForeverIcon) />
                    </div>
                  </div>,
                ],
                "style": Object {
                  "padding": 24,
                  "wordBreak": "break-word",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "TestUserName2",
                  },
                  "ref": null,
                  "rendered": "TestUserName2",
                  "type": "b",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        style={
                          Object {
                            "marginTop": 8,
                          }
                        }
                      >
                        TestDescription
                      </div>,
                      <div
                        onClick={[Function]}
                        style={
                          Object {
                            "cursor": "pointer",
                            "display": "flex",
                            "marginLeft": "40%",
                            "marginTop": -8,
                            "position": "absolute",
                          }
                        }
                      >
                        <pure(DeleteForeverIcon) />
                      </div>,
                    ],
                    "style": Object {
                      "display": "flex",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "TestDescription",
                        "style": Object {
                          "marginTop": 8,
                        },
                      },
                      "ref": null,
                      "rendered": "TestDescription",
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <pure(DeleteForeverIcon) />,
                        "onClick": [Function],
                        "style": Object {
                          "cursor": "pointer",
                          "display": "flex",
                          "marginLeft": "40%",
                          "marginTop": -8,
                          "position": "absolute",
                        },
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
          false,
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            style={
              Object {
                "marginLeft": 24,
              }
            }
          >
            <h1>
              TestTitle1
            </h1>
            <ValidatorForm
              debounceTime={0}
              onError={[Function]}
              onSubmit={[Function]}
            >
              <TextValidator
                InputLabelProps={
                  Object {
                    "shrink": true,
                  }
                }
                errorMessages={
                  Array [
                    "This field is required",
                  ]
                }
                id="standard-textarea"
                label="Comment"
                margin="normal"
                multiline={true}
                name="comment"
                onChange={[Function]}
                style={
                  Object {
                    "width": "calc(40% + 12px)",
                  }
                }
                validatorListener={[Function]}
                validators={
                  Array [
                    "required",
                  ]
                }
                value=""
                variant="outlined"
              />
              <div>
                <WithStyles(Button)
                  type="submit"
                  variant="contained"
                >
                  Submit
                </WithStyles(Button)>
              </div>
            </ValidatorForm>
          </div>,
          <div>
            <WithStyles(Paper)
              style={
                Object {
                  "margin": 24,
                  "overflowX": "auto",
                  "width": "40%",
                }
              }
            >
              <div
                style={
                  Object {
                    "padding": 24,
                    "wordBreak": "break-word",
                  }
                }
              >
                <b>
                  TestUserName2
                </b>
                <div
                  style={
                    Object {
                      "display": "flex",
                    }
                  }
                >
                  <div
                    style={
                      Object {
                        "marginTop": 8,
                      }
                    }
                  >
                    TestDescription
                  </div>
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "cursor": "pointer",
                        "display": "flex",
                        "marginLeft": "40%",
                        "marginTop": -8,
                        "position": "absolute",
                      }
                    }
                  >
                    <pure(DeleteForeverIcon) />
                  </div>
                </div>
              </div>
            </WithStyles(Paper)>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                TestTitle1
              </h1>,
              <ValidatorForm
                debounceTime={0}
                onError={[Function]}
                onSubmit={[Function]}
              >
                <TextValidator
                  InputLabelProps={
                    Object {
                      "shrink": true,
                    }
                  }
                  errorMessages={
                    Array [
                      "This field is required",
                    ]
                  }
                  id="standard-textarea"
                  label="Comment"
                  margin="normal"
                  multiline={true}
                  name="comment"
                  onChange={[Function]}
                  style={
                    Object {
                      "width": "calc(40% + 12px)",
                    }
                  }
                  validatorListener={[Function]}
                  validators={
                    Array [
                      "required",
                    ]
                  }
                  value=""
                  variant="outlined"
                />
                <div>
                  <WithStyles(Button)
                    type="submit"
                    variant="contained"
                  >
                    Submit
                  </WithStyles(Button)>
                </div>
              </ValidatorForm>,
            ],
            "style": Object {
              "marginLeft": 24,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "TestTitle1",
              },
              "ref": null,
              "rendered": "TestTitle1",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <TextValidator
                    InputLabelProps={
                      Object {
                        "shrink": true,
                      }
                    }
                    errorMessages={
                      Array [
                        "This field is required",
                      ]
                    }
                    id="standard-textarea"
                    label="Comment"
                    margin="normal"
                    multiline={true}
                    name="comment"
                    onChange={[Function]}
                    style={
                      Object {
                        "width": "calc(40% + 12px)",
                      }
                    }
                    validatorListener={[Function]}
                    validators={
                      Array [
                        "required",
                      ]
                    }
                    value=""
                    variant="outlined"
                  />,
                  <div>
                    <WithStyles(Button)
                      type="submit"
                      variant="contained"
                    >
                      Submit
                    </WithStyles(Button)>
                  </div>,
                ],
                "debounceTime": 0,
                "onError": [Function],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "InputLabelProps": Object {
                      "shrink": true,
                    },
                    "errorMessages": Array [
                      "This field is required",
                    ],
                    "id": "standard-textarea",
                    "label": "Comment",
                    "margin": "normal",
                    "multiline": true,
                    "name": "comment",
                    "onChange": [Function],
                    "style": Object {
                      "width": "calc(40% + 12px)",
                    },
                    "validatorListener": [Function],
                    "validators": Array [
                      "required",
                    ],
                    "value": "",
                    "variant": "outlined",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <WithStyles(Button)
                      type="submit"
                      variant="contained"
                    >
                      Submit
                    </WithStyles(Button)>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Submit",
                      "type": "submit",
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": "Submit",
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              Array [
                <WithStyles(Paper)
                  style={
                    Object {
                      "margin": 24,
                      "overflowX": "auto",
                      "width": "40%",
                    }
                  }
                >
                  <div
                    style={
                      Object {
                        "padding": 24,
                        "wordBreak": "break-word",
                      }
                    }
                  >
                    <b>
                      TestUserName2
                    </b>
                    <div
                      style={
                        Object {
                          "display": "flex",
                        }
                      }
                    >
                      <div
                        style={
                          Object {
                            "marginTop": 8,
                          }
                        }
                      >
                        TestDescription
                      </div>
                      <div
                        onClick={[Function]}
                        style={
                          Object {
                            "cursor": "pointer",
                            "display": "flex",
                            "marginLeft": "40%",
                            "marginTop": -8,
                            "position": "absolute",
                          }
                        }
                      >
                        <pure(DeleteForeverIcon) />
                      </div>
                    </div>
                  </div>
                </WithStyles(Paper)>,
              ],
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "100",
              "nodeType": "class",
              "props": Object {
                "children": <div
                  style={
                    Object {
                      "padding": 24,
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <b>
                    TestUserName2
                  </b>
                  <div
                    style={
                      Object {
                        "display": "flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "marginTop": 8,
                        }
                      }
                    >
                      TestDescription
                    </div>
                    <div
                      onClick={[Function]}
                      style={
                        Object {
                          "cursor": "pointer",
                          "display": "flex",
                          "marginLeft": "40%",
                          "marginTop": -8,
                          "position": "absolute",
                        }
                      }
                    >
                      <pure(DeleteForeverIcon) />
                    </div>
                  </div>
                </div>,
                "style": Object {
                  "margin": 24,
                  "overflowX": "auto",
                  "width": "40%",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <b>
                      TestUserName2
                    </b>,
                    <div
                      style={
                        Object {
                          "display": "flex",
                        }
                      }
                    >
                      <div
                        style={
                          Object {
                            "marginTop": 8,
                          }
                        }
                      >
                        TestDescription
                      </div>
                      <div
                        onClick={[Function]}
                        style={
                          Object {
                            "cursor": "pointer",
                            "display": "flex",
                            "marginLeft": "40%",
                            "marginTop": -8,
                            "position": "absolute",
                          }
                        }
                      >
                        <pure(DeleteForeverIcon) />
                      </div>
                    </div>,
                  ],
                  "style": Object {
                    "padding": 24,
                    "wordBreak": "break-word",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "TestUserName2",
                    },
                    "ref": null,
                    "rendered": "TestUserName2",
                    "type": "b",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <div
                          style={
                            Object {
                              "marginTop": 8,
                            }
                          }
                        >
                          TestDescription
                        </div>,
                        <div
                          onClick={[Function]}
                          style={
                            Object {
                              "cursor": "pointer",
                              "display": "flex",
                              "marginLeft": "40%",
                              "marginTop": -8,
                              "position": "absolute",
                            }
                          }
                        >
                          <pure(DeleteForeverIcon) />
                        </div>,
                      ],
                      "style": Object {
                        "display": "flex",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "TestDescription",
                          "style": Object {
                            "marginTop": 8,
                          },
                        },
                        "ref": null,
                        "rendered": "TestDescription",
                        "type": "div",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <pure(DeleteForeverIcon) />,
                          "onClick": [Function],
                          "style": Object {
                            "cursor": "pointer",
                            "display": "flex",
                            "marginLeft": "40%",
                            "marginTop": -8,
                            "position": "absolute",
                          },
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {},
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                        "type": "div",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": [Function],
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
